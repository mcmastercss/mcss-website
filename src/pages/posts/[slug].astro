---
import RichText from "../../components/RichText.astro";
import Layout from "../../layouts/Layout.astro";
import PostHeader from "../../components/PostHeader.astro";
import PostFooter from "../../components/PostFooter.astro";

import { getPosts } from "../../api";
import type { Post, User, Thumbnail, Pfp, Tag, Category } from "../../payload-types";
import type { FormattedElement, FormattedText } from "../../rich-text-export";

// Assets
import placeholderThumbnail from "../../assets/images/default.jpg";
import placeholderPfp from "../../assets/team/placeholder.jpg";

export async function getStaticPaths() {
    const posts = await getPosts();
    // console.log(posts);
    const paths = posts.docs.map((post) => {
        return {
            params: { slug: post.slug },
            props: { post },
        };
    });
    return paths;
}

export interface Props {
    post: Post;
    params: string | undefined;
}

const { post } = Astro.props;

// if image url doesn't exist give it the placeholder image
const imageOrDefault = (obj: string | Post | User, placeholder: string) => {
    if (typeof obj === "string") {
        return obj;

        // Get thumbnail
    } else if ("thumbnail" in obj) {
        const thumbnail = obj.thumbnail as Thumbnail;
        return thumbnail?.url ?? placeholder;
        // get pfp
    } else if ("pfp" in obj) {
        const pfp = obj.pfp as Pfp;
        return pfp?.url ?? placeholder;
    }

    // default to placeholder
    return placeholder;
};

const thumbnail = imageOrDefault(post, placeholderThumbnail.src);
const pfp = imageOrDefault(post.author, placeholderPfp.src);
const content = post.content as (FormattedElement | FormattedText)[];
const author = post.author as User;
const publishedDate = new Date(post.publishedDate);
const formattedDate = publishedDate.toLocaleDateString("en-US", {
    month: "long",
    day: "numeric",
    year: "numeric",
});
---

<Layout title={post.title || ""}>
    <PostHeader />
    <main class="p-6 lg:p-12 max-w-7xl m-auto">
        <h2 class="text-blue-600 font-bold text-xl pb-2">{(post.category as Category).name}</h2>
        <h1 class="text-3xl font-extrabold text-black pb-6">{post.title}</h1>
        <!-- tags -->
        {
            "tags" in post && post.tags.length > 0 && (
                <h1 class="text-blue-600 text-lg pb-2">Tags</h1>
                <div class="flex pb-4 gap-3">
                    {(post.tags as Tag[]).map((item) => (
                        <p class="text-sm font-bold px-3 py-1 rounded-2xl bg-slate-300">{item.name}</p>
                    ))}
                </div>
            )
        }
        <!-- author info -->
        <div class="flex items-center pb-8">
            <img
                class="w-12 h-12 rounded-full mr-4 border-2 border-gray-500"
                src={pfp}
                alt=""
            />
            <div class="flex flex-col">
                <h4 class="font-extrabold text-xl capitalize">{author.name}</h4>
                <h5 class="underline">{author.email}</h5>
            </div>
            <div class="flex flex-col ml-auto text-right">
                <h4 class="">Published</h4>
                <h5 class="">{formattedDate}</h5>
            </div>
        </div>

        <img class="rounded-xl w-full" src={thumbnail} alt="" srcset="" />
        <p class="pt-8">{post.content && <RichText richText={content} />}</p>
    </main>
    <PostFooter />
</Layout>
