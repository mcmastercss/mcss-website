---
import RichText from "../../components/RichText.astro";
import Layout from "../../layouts/Layout.astro";
import PostHeader from "../../components/PostHeader.astro";
import PostFooter from "../../components/PostFooter.astro";
import Event from "../../components/Event.astro";
import { capString } from "../../utils/globalFunctions";

import { getPosts } from "../../api";
import type {
  Post,
  User,
  Thumbnail,
  Pfp,
  Tag,
  Category,
} from "../../payload-types";
import type { FormattedElement, FormattedText } from "../../rich-text-export";

// Assets
import placeholderThumbnail from "../../assets/images/default.jpg";
import placeholderPfp from "../../assets/team/placeholder.jpg";

export async function getStaticPaths() {
  const posts = await getPosts();
  const paths = posts.docs.map((post) => {
    return {
      params: { slug: post.slug },
      props: { post },
    };
  });
  return paths;
}

export interface Props {
  post: Post;
  params: string | undefined;
}

const { post } = Astro.props;
// if image url doesn't exist give it the placeholder image
const imageOrDefault = (obj: string | Post | User, placeholder: string) => {
if (typeof obj === "string") {
    return obj;

    // Get thumbnail
  } else if ("thumbnail" in obj) {
    if (typeof obj.thumbnail === "string") {
      return obj.thumbnail as string;
    }

    const thumbnail = obj.thumbnail as Thumbnail;
    return thumbnail?.url !== undefined ? import.meta.env.PAYLOAD_URL + thumbnail.url : placeholder;
    // get pfp
  } else if ("pfp" in obj) {
    if (typeof obj.pfp === "string") {
      return obj.pfp as string;
    }
    
    const pfp = obj.pfp as Pfp;
    return pfp?.url !== undefined ? import.meta.env.PAYLOAD_URL + pfp.url : placeholder;
  }

  // default to placeholder
  return placeholder;
};

const thumbnail = imageOrDefault(post, placeholderThumbnail.src);
const pfp = imageOrDefault(post.author, placeholderPfp.src);
const content = post.content as (FormattedElement | FormattedText)[];
const author = post.author as User;
const publishedDate = new Date(post.publishedDate);
const formattedDate = publishedDate.toLocaleDateString("en-US", {
  month: "long",
  day: "numeric",
  year: "numeric",
});
---

<Layout title={post.title || ""}>
  <PostHeader />
  <main class="p-6 lg:p-20 xl:px-44 m-auto">
    <h2 class="text-blue-600 font-bold text-xl lg:text-2xl pb-2">
      {(post.category as Category).name}
    </h2>
    <h1 class="text-3xl lg:text-5xl font-extrabold text-black pb-6 capitalize break-words w-10/12">
      {capString(post.title, 50)}
    </h1>
    <!-- tags -->
    {
      "tags" in post && post.tags.length > 0 && (
        <>
          <div class="lg:flex lg:gap-5">
            <h1 class="pb-2 text-base font-semibold text-blue-600 lg:pb-4 lg:text-lg">
              Tags
            </h1>
            <div class="flex gap-3 pb-4">
              {(post.tags as Tag[]).map((item) => (
                <p class="rounded-lg bg-gray-200 px-3 py-1 text-xs font-semibold lg:text-sm">
                  {item.name}
                </p>
              ))}
            </div>
          </div>
        </>
      )
    }
    <!-- author info -->
    <div class="flex items-center pb-8">
      <img
        class="w-12 h-12 rounded-full mr-4 border-2 border-gray-500"
        src={pfp}
        alt=""
      />
      <div class="flex flex-col">
        <h4 class="font-extrabold text-xl capitalize">{author.name}</h4>
        <h5 class="underline">{author.email}</h5>
      </div>
      <div
        class="flex flex-col ml-auto text-right lg:flex-row lg:gap-5 lg:self-center"
      >
        <h4 class="font-light">Published</h4>
        <h5 class="">{formattedDate}</h5>
      </div>
    </div>

    <!-- thumbnail -->
    <div class="flex flex-col">
      <img
        class="rounded pt-7 :lg-pt-0 w-full max-h-[38rem] object-cover"
        src={thumbnail}
        alt=""
        srcset=""
      />
      {
        (post.category as Category).name === "Event" && (
          <div class="p-0 pt-5 lg:absolute lg:right-52 lg:w-[26em] lg:p-0 lg:pt-28 xl:w-[32em]">
            <Event
              eventName={post.title}
              dateStart={post.eventStartTime}
              dateEnd={post.eventEndTime}
              location={post.eventLocation}
              locationurl={post.eventLocationURL}
            />
          </div>
        )
      }
    </div>
    <p class="pt-8">
      {post.content && <RichText richText={content} />}
    </p>
  </main>
  <PostFooter />
</Layout>
